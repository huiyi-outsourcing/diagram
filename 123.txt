private System.Windows.Forms.Timer timer;

        Socket client;
        public string host = "";
        int port = 2000;
        Thread Data;
        Encoding utf8 = Encoding.UTF8;
        Encoding gb2312 = Encoding.GetEncoding("GB2312");
        delegate void SetSafe(string text);
       

        DataTable dt;

        string WELLID, WELLBOREID, STKNUM, RECID, SEQID, TDATE, TTIME, ACTCOD, DEPTMEAS, DEPTVERT, ROPA, WOBA, HKLA, SPPA;
        string TORQA, RPMA, BTREVC, MDIA, ECDTD, MFIA, MFOA, MFOP, TVOLACT, CPDI, CPDC, BTDTIME, BTDDIST, DXC, PipeNo;
        string PipeLength, KellyDown, Dcn, pf, Frac, DRTM, BPOS, SPM1, SPM2, SPM3;
        string HookTorq, CHKP, MDOA, MTOA, MTIA, MCOA, MCIA, SFLAG;
        int k = 0;

        SqlDataAccess con;
        TcpListener listener;
        ArrayList conlist = new ArrayList();
        ArrayList LJinfo = new ArrayList();

        Thread listenerThread, DataThread;
        int port1 = 2000;
















 public void DataCollect()
        {
            WELLID = "龙109井";
            WELLBOREID = "主井眼";

            ///////////////////////////////////连接发送服务器数据库
            SqlDataAccess conn1 = new SqlDataAccess("Data Source=9JSRHS20J49GIWN;Initial Catalog=DMDS数据库;Integrated Security=True");

            ///////////////////////////////////连接接受服务器数据库
            con = new SqlDataAccess("Data Source=9JSRHS20J49GIWN;Initial Catalog=DMDS数据库1;Integrated Security=True");


            //////////////////////////////////////////将数据库中需实时采集数据的表清空
            string Delete = "Delete from WS_Drilling_Depth_Based where WELLID = '" + WELLID + "' and WELLBOREID ='" + WELLBOREID + "'";
            con.ExeSQL(Delete);
            /////////////////////////////////////////////////////////

            /////////////////////////////开启服务器
            if (listener == null)
            {
                listener = new TcpListener(port);
                listener.Start();
                listenerThread = new Thread(new ThreadStart(AcceptRequest));
                listenerThread.Start();
                DataThread = new Thread(new ThreadStart(ReceiveData));
                DataThread.Start();
            }

            ///////////////////////////////连接服务器
            host = "127.0.0.1";
            port1 = 2000;
            try
            {
                client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                client.Connect(host, port1);

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            if (client != null && client.Connected)
            {
                Data = new Thread(new ThreadStart(DataStart));
                Data.Start();

            }

            dt = conn1.SelectDataTable("select * from WS_Drilling_Depth_Based  where WELLID = '" + WELLID + "' and WELLBOREID = '" + WELLBOREID + "'order by DEPTMEAS asc");

            int N = dt.Rows.Count;

            Timer1();

        }

        void Timer1()
        {
            timer = new System.Windows.Forms.Timer();
            timer.Enabled = true;
            timer.Interval = 5000;
            timer.Tick += new EventHandler(timer1_Tick);
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            try
            {
                WELLID = dt.Rows[k]["WELLID"].ToString();
                WELLBOREID = dt.Rows[k]["WELLBOREID"].ToString();
                STKNUM = dt.Rows[k]["STKNUM"].ToString();
                RECID = dt.Rows[k]["RECID"].ToString();
                SEQID = dt.Rows[k]["SEQID"].ToString();
                TDATE = dt.Rows[k]["TDATE"].ToString();
                TTIME = dt.Rows[k]["TTIME"].ToString();
                ACTCOD = dt.Rows[k]["ACTCOD"].ToString();
                DEPTMEAS = dt.Rows[k]["DEPTMEAS"].ToString();
                DEPTVERT = dt.Rows[k]["DEPTVERT"].ToString();
                ROPA = dt.Rows[k]["ROPA"].ToString();
                WOBA = dt.Rows[k]["WOBA"].ToString();
                HKLA = dt.Rows[k]["HKLA"].ToString();
                SPPA = dt.Rows[k]["SPPA"].ToString();
                TORQA = dt.Rows[k]["TORQA"].ToString();
                RPMA = dt.Rows[k]["RPMA"].ToString();
                BTREVC = dt.Rows[k]["BTREVC"].ToString();
                MDIA = dt.Rows[k]["MDIA"].ToString();
                ECDTD = dt.Rows[k]["ECDTD"].ToString();
                MFIA = dt.Rows[k]["MFIA"].ToString();
                MFOA = dt.Rows[k]["MFOA"].ToString();
                MFOP = dt.Rows[k]["MFOP"].ToString();
                TVOLACT = dt.Rows[k]["TVOLACT"].ToString();
                CPDI = dt.Rows[k]["CPDI"].ToString();
                CPDC = dt.Rows[k]["CPDC"].ToString();
                BTDTIME = dt.Rows[k]["BTDTIME"].ToString();
                BTDDIST = dt.Rows[k]["BTDDIST"].ToString();
                DXC = dt.Rows[k]["DXC"].ToString();
                PipeNo = dt.Rows[k]["PipeNo"].ToString();
                PipeLength = dt.Rows[k]["PipeLength"].ToString();
                KellyDown = dt.Rows[k]["KellyDown"].ToString();
                Dcn = dt.Rows[k]["Dcn"].ToString();
                pf = dt.Rows[k]["pf"].ToString();
                Frac = dt.Rows[k]["Frac"].ToString();
                DRTM = dt.Rows[k]["DRTM"].ToString();
                BPOS = dt.Rows[k]["BPOS"].ToString();
                SPM1 = dt.Rows[k]["SPM1"].ToString();
                SPM2 = dt.Rows[k]["SPM2"].ToString();
                SPM3 = dt.Rows[k]["SPM3"].ToString();
                HookTorq = dt.Rows[k]["HookTorq"].ToString();
                CHKP = dt.Rows[k]["CHKP"].ToString();
                MDOA = dt.Rows[k]["MDOA"].ToString();
                MTOA = dt.Rows[k]["MTOA"].ToString();
                MTIA = dt.Rows[k]["MTIA"].ToString();
                MCOA = dt.Rows[k]["MCOA"].ToString();
                MCIA = dt.Rows[k]["MCIA"].ToString();
                SFLAG = dt.Rows[k]["SFLAG"].ToString();

                ///////////////////////////////////////////////////发送的字符串信息
                string strSend = " " + "$" + WELLID + "," + WELLBOREID + "," + STKNUM + "," + RECID + "," + SEQID + "," + TDATE + "," + TTIME + "," + ACTCOD + "," + DEPTMEAS + ","
                    + DEPTVERT + "," + ROPA + "," + WOBA + "," + HKLA + "," + SPPA + "," + TORQA + "," + RPMA + "," + BTREVC + "," + MDIA + "," + ECDTD + "," + MFIA + "," + MFOA + "," + MFOP + ","
                    + TVOLACT + "," + CPDI + "," + CPDC + "," + BTDTIME + "," + BTDDIST + "," + DXC + "," + PipeNo + "," + PipeLength + "," + KellyDown + "," + Dcn + "," + pf + "," + Frac + "," + DRTM + ","
                    + BPOS + "," + SPM1 + "," + SPM2 + "," + SPM3 + "," + HookTorq + "," + CHKP + "," + MDOA + "," + MTOA + "," + MTIA + "," + MCOA + "," + MCIA + "," + SFLAG;
                strSend = strSend + "\r\n";

                byte[] butf = utf8.GetBytes(strSend);
                client.Send(butf);

            }
            catch
            {
                MessageBox.Show("由于网络问题，发送失败！", "错误", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            k++;
            if (k == dt.Rows.Count)
            {

                MessageBox.Show("数据发送完毕！", "提示", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }


        public void DataStart()
        {
            while (true)
            {
                try
                {
                    NetworkStream ns = new NetworkStream(client);
                    StreamReader reader = new StreamReader(ns);
                    string result = reader.ReadLine();
                    byte[] u = utf8.GetBytes(result);
                    byte[] gb = Encoding.Convert(utf8, gb2312, u);
                    string sGb = gb2312.GetString(gb);
                    if (sGb.StartsWith("服务已关闭。"))
                    {

                    }
                    reader.Close();
                    ns.Close();

                }
                catch { }
                Thread.Sleep(1000);
            }
        }


        public void AcceptRequest()
        {
            try
            {
                while (true)
                {
                    if (listener.Pending())
                    {
                        Socket client = listener.AcceptSocket();
                        conlist.Add(client);
                        if (client.Connected)
                        {
                            string ServerEndPoint = "欢迎登录服务器!" + client.LocalEndPoint.ToString() + "\r\n";
                            byte[] bgb = gb2312.GetBytes(ServerEndPoint);
                            byte[] butf = Encoding.Convert(gb2312, utf8, bgb);
                            client.Send(butf);
                            string mpoint = client.RemoteEndPoint.ToString();
                        }
                    }
                }
            }
            catch
            { }
            Thread.Sleep(1000);
        }


        public void ReceiveData()
        {
            while (true)
            {
                try
                {
                    ArrayList CloseSocketList = new ArrayList();
                    CloseSocketList.Clear();
                    foreach (Socket s in conlist)
                    {
                        NetworkStream ns = new NetworkStream(s);
                        StreamReader reader = new StreamReader(ns);
                        if (ns.DataAvailable)//还未执行
                        {
                            string result = reader.ReadLine();
                            byte[] u = utf8.GetBytes(result);
                            byte[] gb = Encoding.Convert(utf8, gb2312, u);
                            string sGb = gb2312.GetString(gb);

                            if (sGb.Contains("$"))
                            {
                                string[] str = sGb.Split(new Char[] { '$' });
                                foreach (string ss in str)
                                {
                                    string[] str2 = ss.Split(new char[] { ',' });
                                    if (str2.Length > 3)
                                    {
                                        /////////////////////////////////////////////////////////////////////定义接收数据项
                                        string WELLID, WELLBOREID, STKNUM, RECID, SEQID, TDATE, TTIME, ACTCOD, DEPTMEAS, DEPTVERT, ROPA, WOBA, HKLA, SPPA;
                                        string TORQA, RPMA, BTREVC, MDIA, ECDTD, MFIA, MFOA, MFOP, TVOLACT, CPDI, CPDC, BTDTIME, BTDDIST, DXC, PipeNo;
                                        string PipeLength, KellyDown, Dcn, pf, Frac, DRTM, BPOS, SPM1, SPM2, SPM3;
                                        string HookTorq, CHKP, MDOA, MTOA, MTIA, MCOA, MCIA, SFLAG;


                                        WELLID = str2[0];
                                        WELLBOREID = str2[1];
                                        STKNUM = str2[2];
                                        RECID = str2[3];
                                        SEQID = str2[4];
                                        TDATE = str2[5];
                                        TTIME = str2[6];
                                        ACTCOD = str2[7];
                                        DEPTMEAS = str2[8];
                                        DEPTVERT = str2[9];
                                        ROPA = str2[10];
                                        WOBA = str2[11];
                                        HKLA = str2[12];
                                        SPPA = str2[13];
                                        TORQA = str2[14];
                                        RPMA = str2[15];
                                        BTREVC = str2[16];
                                        MDIA = str2[17];
                                        ECDTD = str2[18];
                                        MFIA = str2[19];
                                        MFOA = str2[20];
                                        MFOP = str2[21];
                                        TVOLACT = str2[22];
                                        CPDI = str2[23];
                                        CPDC = str2[24];
                                        BTDTIME = str2[25];
                                        BTDDIST = str2[26];
                                        DXC = str2[27];
                                        PipeNo = str2[28];
                                        PipeLength = str2[29];
                                        KellyDown = str2[30];
                                        Dcn = str2[31];
                                        pf = str2[32];
                                        Frac = str2[33];
                                        DRTM = str2[34];
                                        BPOS = str2[35];
                                        SPM1 = str2[36];
                                        SPM2 = str2[37];
                                        SPM3 = str2[38];
                                        HookTorq = str2[39];
                                        CHKP = str2[40];
                                        MDOA = str2[41];
                                        MTOA = str2[42];
                                        MTIA = str2[43];
                                        MCOA = str2[44];
                                        MCIA = str2[45];
                                        SFLAG = str2[46];

                                        ///////////////////////////连接数据库

                                        //////////////////////////////////////////////////////////////////////////////////////
                                        string strSql = "select * from WS_Drilling_Depth_Based where WELLID='" + WELLID + "' and WELLBOREID='" + WELLBOREID + "' and DEPTVERT ='" + DEPTVERT + "' ";
                                        DataTable dt = con.SelectDataTable(strSql);

                                        if (dt.Rows.Count > 0)
                                        {
                                            foreach (DataRow row in dt.Rows)
                                            {
                                                row.Delete();
                                            }
                                        }
                                        else
                                        {
                                            string insert = "Insert into WS_Drilling_Depth_Based (WELLID,WELLBOREID,STKNUM,RECID,SEQID,TDATE,TTIME,ACTCOD,DEPTMEAS,DEPTVERT,ROPA,WOBA,HKLA,SPPA,TORQA,RPMA,BTREVC,MDIA,ECDTD,MFIA,MFOA,MFOP,TVOLACT,CPDI,CPDC,BTDTIME,BTDDIST,DXC,PipeNo,PipeLength,KellyDown,Dcn,pf,Frac,DRTM,BPOS,SPM1,SPM2,SPM3,HookTorq,CHKP,MDOA,MTOA,MTIA,MCOA,MCIA,SFLAG) VALUES('" + WELLID + "','"
                                               + WELLBOREID + "','" + STKNUM + "','" + RECID + "','" + SEQID + "','" + TDATE + "','" + TTIME + "','" + ACTCOD + "','" + DEPTMEAS + "','"
                       + DEPTVERT + "','" + ROPA + "','" + WOBA + "','" + HKLA + "','" + SPPA + "','" + TORQA + "','" + RPMA + "','" + BTREVC + "','" + MDIA + "','" + ECDTD + "','" + MFIA + "','" + MFOA + "','" + MFOP + "','"
                       + TVOLACT + "','" + CPDI + "','" + CPDC + "','" + BTDTIME + "','" + BTDDIST + "','" + DXC + "','" + PipeNo + "','" + PipeLength + "','" + KellyDown + "','" + Dcn + "','" + pf + "','" + Frac + "','" + DRTM + "','"
                       + BPOS + "','" + SPM1 + "','" + SPM2 + "','" + SPM3 + "','" + HookTorq + "','" + CHKP + "','" + MDOA + "','" + MTOA + "','" + MTIA + "','" + MCOA + "','" + MCIA + "','" + SFLAG + "')";

                                            con.ExeSQL(insert);

                                            ;
                                        }

                                    }

                                }
                            }
                            if (sGb.StartsWith("Close"))
                            {
                                CloseSocketList.Add(s);
                            }
                            else
                            {
                            }
                        }
                        reader.Close();
                        ns.Close();
                    }
                    foreach (Socket s in CloseSocketList)
                    {
                        s.Close();
                        conlist.Remove(s);
                    }
                }
                catch
                { }
                Thread.Sleep(1000);
            }
        }